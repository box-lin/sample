<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-LinkedList-Insert</title>
    <url>/2021/03/07/LinkedList-Insert/</url>
    <content><![CDATA[<p><em>Discussion: Read values from a file and insert values into a LinkedList data structure</em></p>
<p><em>The goal is that at any point of the insertion the LinkedList should be in sorted</em></p>
<h3 id="First-Approach-Using-the-JAVA-Library-LinkedList"><a href="#First-Approach-Using-the-JAVA-Library-LinkedList" class="headerlink" title="First Approach Using the JAVA Library LinkedList"></a>First Approach Using the JAVA Library LinkedList</h3><hr>
<ul>
<li><p>We passing the file address into the run methodâ€™s parameter and do the try catch.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class....&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String address)</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">                read_insert(address); <span class="comment">//if address is valid, read it.</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace(); <span class="comment">//else, error resulted</span></span><br><span class="line">                System.exit(<span class="number">0</span>); <span class="comment">//exist the program</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>Using the Buffered-Reader to read values from the file.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read_insert</span><span class="params">(String address)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		File text = <span class="keyword">new</span> File(address);</span><br><span class="line">		BufferedReader br1 = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(text));</span><br><span class="line">		String s = <span class="keyword">null</span>; </span><br><span class="line">		<span class="keyword">while</span>((s=br1.readLine())!=<span class="keyword">null</span>) &#123;  <span class="comment">//read line by line</span></span><br><span class="line">			list.insert(Integer.parseInt(s)); <span class="comment">//parse to int and pass to insert method</span></span><br><span class="line">		&#125;</span><br><span class="line">		br1.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<span id="more"></span>
<ul>
<li><p>Now we created a insert method to inserting each value that pass in from the Buffered-Reader.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(list.size() == <span class="number">0</span> || value &lt; list.getFirst() ) &#123;  </span><br><span class="line">			list.addFirst(value); <span class="comment">//insert at the head if list is empty and </span></span><br><span class="line">                                  <span class="comment">//if val &lt; head&#x27;s val</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(value &gt; list.getLast() ) &#123;</span><br><span class="line">			list.addLast(value);  <span class="comment">//insert to the tail if val &gt; tail&#x27;s value</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			Iterator&lt;Integer&gt; it = list.iterator();  </span><br><span class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		       <span class="keyword">while</span>(it.hasNext() &amp;&amp; value &gt;= it.next())&#123;  </span><br><span class="line">		    	   index ++;     <span class="comment">//if the list is not empty and val still &gt;= list&#x27;s                                    //next value, index keep increases by 1</span></span><br><span class="line">		        &#125;</span><br><span class="line">		     list.add(index,value); <span class="comment">//usingg the java library to add the value at specific index.</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>The insert runtime complexity is O(N + N) = O(N) </strong></p>
<p><strong>NOTICE: </strong><em>The runtime complexity could be worst to O(N^2) if our insert algorithm suppose as below:</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(list.size() == <span class="number">0</span> || value &lt; list.getFirst() ) &#123;  </span><br><span class="line">			list.addFirst(value); <span class="comment">//insert at the head if list is empty and </span></span><br><span class="line">                                  <span class="comment">//if val &lt; head&#x27;s val</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(value &gt; list.getLast() ) &#123;</span><br><span class="line">			list.addLast(value);  <span class="comment">//insert to the tail if val &gt; tail&#x27;s value</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(val&lt;list.get(i))&#123;</span><br><span class="line">					list.add(i,value);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p><em><u>This algorithm is not good in runtime and often time algorithm that involve break is not safe, however, this algorithm might be OKAY for a small size of values file but cause runtime error if size of file is large</u></em></p>
</li>
</ul>
<h3 id="Second-Approach-Using-Self-Define-Singly-LinkedList"><a href="#Second-Approach-Using-Self-Define-Singly-LinkedList" class="headerlink" title="Second Approach Using Self-Define Singly LinkedList"></a>Second Approach Using Self-Define Singly LinkedList</h3><hr>
<p>  <em>We know that LinkedList data structure basically is objects that linked to each other, each object contains some value</em></p>
<p>  <strong>Singly LinkedList looks like this:</strong></p>
<p>  <img src="https://github.com/boxianglin/Storage/blob/main/LinkedList-Insert%20Post/L1.png?raw=true" alt="avatar"></p>
<p>  <em>that each of the rectangle is a object, value is inside of the object, and arrow is the self-define data type that help to connect up the object, often we using the object as a data type for the arrow</em></p>
<p>  <strong>Now our object that to store the value will be as follows: </strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	ListNode next;   <span class="comment">//arrow</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.val = val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  <strong>and our LinkedList is a collection of the ListNodes</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>&#123;</span><br><span class="line">	 </span><br><span class="line">	</span><br><span class="line">	ListNode head;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">		head = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>OKAY, So now lets implementing the insert method</strong>: <em>same idea as the previous one but instead now we are creating our own LinkList instead of using the java library. So we will be do some mollifications to the add(index, val) method that was in Java Library.</em></p>
<p>  <em>Suppose we are inserting 3 to the LinkedList:</em></p>
<p>  <img src="https://github.com/boxianglin/Storage/blob/main/LinkedList-Insert%20Post/L2.png?raw=true" alt="avatar"></p>
<p>  <em>We will let  3 â€”&gt; 4 first, then let 2 â€”&gt; 3.</em>  </p>
<p>  <img src="https://github.com/boxianglin/Storage/blob/main/LinkedList-Insert%20Post/L3.png?raw=true" alt="avatar"></p>
<p>  <strong>So, lets do it to the codes</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;	 </span><br><span class="line">		<span class="comment">//list is empty or val that greater than first node&#x27;s value, swap them </span></span><br><span class="line">		<span class="keyword">if</span>(head == <span class="keyword">null</span> || head.val &gt; data) &#123;</span><br><span class="line">			ListNode newHead= <span class="keyword">new</span> ListNode(data);</span><br><span class="line">			newHead.next = head;</span><br><span class="line">			head = newHead;</span><br><span class="line">			size++;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//cur as a temporary node that use to traverse the list</span></span><br><span class="line">			ListNode cur = head;</span><br><span class="line">			<span class="keyword">while</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.val&lt;data) &#123;</span><br><span class="line">				cur = cur.next; <span class="comment">//if value greater than node&#x27;s value, keep going </span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cur.next == <span class="keyword">null</span>) &#123; <span class="comment">//case to put the value to the tail</span></span><br><span class="line">				ListNode nextVal = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">				cur.next = nextVal;</span><br><span class="line">				size++;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;    <span class="comment">//case to insert</span></span><br><span class="line">				ListNode newNext = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">				newNext.next = cur.next; <span class="comment">//cur.next point to the new val</span></span><br><span class="line">				cur.next = newNext; <span class="comment">//new val then be the new cur.next</span></span><br><span class="line">				size++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  <strong>This algorithm of insert takes runtime of O(N), we are basically traverse through the list and doing some pointing direction change necessary</strong></p>
<p>  Alright! This is two approach for <strong>insert algorithm</strong> that to main the list sorted at any given point. </p>
<p>  I will upload the full version of the codes on my GitHub shortly.</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Numerically Solve PDE</title>
    <url>/2021/05/22/NumericallyPDE/</url>
    <content><![CDATA[<p>For phone user, the css might not be properly rendered for MathJax, please visit<br>the pdf file at <a href="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/NumericallyPDEs.pdf">here</a></p>
<h4 id="Sample-Partial-Differential-Equation"><a href="#Sample-Partial-Differential-Equation" class="headerlink" title="Sample Partial Differential Equation"></a>Sample Partial Differential Equation</h4><script type="math/tex; mode=display">
\begin{align*}
& \text{Suppose given the PDE (Diffusion)} \\
& \partial_tu=D\partial_x^2u,\ for\ x\ \in[0,1],and\ t>0\\
\\
& \text{Exact Solution (can be found in multiple PDEs textbooks): }\\
& u(x,t) = \sum_{k=1}^{n}=\frac{4}{(k\pi)^2}sin(\frac{k\pi}{2})sin(k\pi x)e^{-0.5(k\pi )^2t}\\
\\
& \text{We are going to compute the numerical solution with }\\
& \text{the given information below. }\\
\\
& \text{for }x \in[0,1] \text{ and t > 0 :}\\
& the\ initial\ condition\ u(x,0)=\begin{cases}
x,  & \text{if } 0\leq x \leq 1/2\\
1-x, & \text{if } 1/2 < x\leq1   
\end{cases}\\
&\text{the boundary condition } u(0,t)=u(1,t)=0 \\
\\
& \text{The Explicit Difference Schema: }\\
& \frac{u_j^{n+1}-u_j^n}{\Delta t}= D\frac{u_{j+1}^n-2u_j^n+u_{j-1}^n}{(\Delta x)^2}, where\ D=\frac{1}{2}\\
\\

&\text{Take }\Delta x=0.1, \Delta t=1/100 \text{ to proceed the calculations;}
\end{align*}</script><span id="more"></span>
<h4 id="Solving-Idea-for-a-particular-t"><a href="#Solving-Idea-for-a-particular-t" class="headerlink" title="Solving Idea for a particular t"></a>Solving Idea for a particular t</h4><script type="math/tex; mode=display">
\begin{align*}
& \text{Use of the finite difference scheme for discretizing partial derivatives}\\
& \text{reduces the problem to vector-matrix multiplication.}\\
\\
& \text{Where the unknown vector }U^n=(U_1^n,U_2^n,...U_N^n)^T\text{ refers to sample}\\
& \text{of grid values of the solution function }u(x,t) \text{ evaluated at } t = t_n.\\
\\
& \text{Then what we focuse on for }u_j^n=u(x_j,t_n) \text{ is in a vector of }U^n to\ U^{n+1} \\
\\
& \text{To calculated the }U^{n+1} , \text{we must use the explicit difference scheme}

\end{align*}</script><h4 id="A-Look-of-Explicit-Difference-Scheme-Equation"><a href="#A-Look-of-Explicit-Difference-Scheme-Equation" class="headerlink" title="A Look of Explicit Difference Scheme Equation"></a>A Look of Explicit Difference Scheme Equation</h4><script type="math/tex; mode=display">
\begin{align*}
& \text{As we said we interested the vector }U^{n+1} = \text{a set of } u_j^{n+1} j\in[1,11],\\
& \text{for the case that }\Delta x= 0.1, x\in[0,1]\\
\\
& \text{Hence we would like to rearrange the equation to:}\\
\\
& u_j^{n+1}= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}(u_{j+1}^n-2u_j^n+u_{j-1^n})+u_j^n\\
& = u(x_j,t_{n+1})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_n)-2u(x_j,t_n)+u(x_{j-1},t_n)]+u(x_j,t_n)\\
\\
& \text{for easier programming purpose, we shift the index of t left by one}\\
& = u(x_j,t_{n})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_{n-1})-2u(x_j,t_{n-1})+u(x_{j-1},t_{n-1})]+u(x_j,t_{n-1})
\end{align*}</script><h4 id="A-Look-of-How-Initial-and-Boundary-Condition-are-Important"><a href="#A-Look-of-How-Initial-and-Boundary-Condition-are-Important" class="headerlink" title="A Look of How Initial and Boundary Condition are Important"></a>A Look of How Initial and Boundary Condition are Important</h4><script type="math/tex; mode=display">
\begin{align*}
& \text{The expression of } u(x,t)\text{ in 2D matrix: }\\
\\
& \begin{matrix}
& 1 & 2&3& \cdots&n\\
1& u(0,0) & u(0, 1\Delta t) & u(0,2\Delta t) & \cdots &  u(0,n\Delta t) \\
2& u(1 \Delta x,0) & \cdots & \cdots& \cdots& u(1\Delta x,n\Delta t)  \\
3& u(2 \Delta x, 0) & \cdots& \cdots& \cdots& u(2\Delta x,n\Delta t)\\
&.\\
&. \\
11& u(1,0)
&\end{matrix}\\
\\
&\text{The initial condition cover the values for first columns}\\
&\text{And the boundary condition cover the values for first and last rows}\\
\\
&\text{Now, the expression of }u(x,t) \text{ should be:} \\
\\
& \begin{matrix}
& 1 & 2&3& \cdots&n\\
1& 0 & 0 & 0 & \cdots &  0 \\
2& 0.1 & u(1\Delta x,1\Delta t) & \cdots& \cdots& u(1\Delta x,n\Delta t)  \\
3& 0.2 & u(2\Delta x,1\Delta t) & \cdots& \cdots& u(2\Delta x,n\Delta t)\\
&.\\
5& 0.5 &\cdots& \cdots& \cdots& \\
6& 0.4 & \cdots& \cdots& \cdots& \\
7& 0.3 &\cdots& \cdots& \cdots& \\
&. \\
11& 0 & 0 & 0 & \cdots &  0
&\end{matrix}\\
\\
\\
& \text{Now from this matrix, we see the pattern of how explicit difference help}\\
& \text{us to calculate the  } u(x_j,t_n);\\
\\
& \text{For example: }u(x_2,t_2),\text{we need }u(x_1,t_1)ï¼Œu(x_2,t_1),u(x_3,t_1)'s \text{ values}\\
&\text{to explicit difference equation: }\\
& u(x_j,t_{n})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_{n-1})-2u(x_j,t_{n-1})+u(x_{j-1},t_{n-1})]+u(x_j,t_{n-1})\\
\\
& \text{Hence we know we must calculated the current columns's val then proceed to}\\
& \text{proceed to the row, }U^n = \text{each columns value, and } U^{n+1} =\text{next columns value}
\end{align*}</script><h4 id="MATLAB-Implementations"><a href="#MATLAB-Implementations" class="headerlink" title="MATLAB Implementations"></a>MATLAB Implementations</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">close all</span><br><span class="line"></span><br><span class="line">prompt = <span class="string">&#x27;Enter the value of âˆ†t: &#x27;</span>;</span><br><span class="line"><span class="comment">% set t_max= x then coloumns needed = x / delta_t + 1</span></span><br><span class="line"><span class="comment">% row = 1/ (0.01) + 1 = 11 (by default x[0,1]</span></span><br><span class="line">delta_t = input(prompt);</span><br><span class="line"></span><br><span class="line">prompt1 = <span class="string">&#x27;Enter the value of T(max): &#x27;</span>;</span><br><span class="line">column = input(prompt1) / delta_t + <span class="number">1</span> ;</span><br><span class="line">row = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2-D array with all zeros for exact solution</span></span><br><span class="line">arr1 = <span class="built_in">zeros</span>(row,column);</span><br><span class="line"></span><br><span class="line"><span class="comment">% initial variables for exact solution</span></span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">arr1_x = <span class="number">0</span>;</span><br><span class="line">arr1_t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% exact solution</span></span><br><span class="line"><span class="comment">% taking 14 terms</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:column</span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:<span class="number">14</span></span><br><span class="line">            result = result + <span class="number">4</span>/(k*<span class="built_in">pi</span>)^<span class="number">2</span>*<span class="built_in">sin</span>(k*<span class="built_in">pi</span>/<span class="number">2</span>)*<span class="built_in">sin</span>(k*<span class="built_in">pi</span>*arr1_x)*<span class="built_in">exp</span>(<span class="number">-0.5</span>*(k*<span class="built_in">pi</span>)^<span class="number">2</span>*arr1_t);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        arr1(<span class="built_in">i</span>,<span class="built_in">j</span>) = result;</span><br><span class="line">        arr1_t = arr1_t + delta_t;     </span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    arr1_t = <span class="number">0</span>;</span><br><span class="line">    arr1_x = arr1_x + <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Numerical Computing Solution</span></span><br><span class="line"><span class="comment">% (Initial Condition)</span></span><br><span class="line">arr2 = <span class="built_in">zeros</span>(row,column);</span><br><span class="line">x_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : row</span><br><span class="line">    <span class="keyword">if</span>(x_num&gt;<span class="number">0.5</span>)</span><br><span class="line">        arr2(<span class="built_in">i</span>,<span class="number">1</span>) = <span class="number">1</span>-x_num;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        arr2(<span class="built_in">i</span>,<span class="number">1</span>) = x_num;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    x_num = x_num + <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% applied explicit differences to calculate other points</span></span><br><span class="line"><span class="comment">% applied boundary condition as well</span></span><br><span class="line">dt = delta_t;</span><br><span class="line">dx = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">2</span>: column</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:row</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">i</span> == <span class="number">1</span> || <span class="built_in">i</span> == row)</span><br><span class="line">            arr2(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            arr2(<span class="built_in">i</span>,<span class="built_in">j</span>) =<span class="number">0.5</span> *dt/(dx)^<span class="number">2</span>*(arr2(<span class="built_in">i</span>+<span class="number">1</span>, <span class="built_in">j</span><span class="number">-1</span>)<span class="number">-2</span>*arr2(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>)+arr2(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span><span class="number">-1</span>))+arr2(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>); </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Error |Exact - Numerical|</span></span><br><span class="line">error = <span class="built_in">zeros</span>(row, column);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : column</span><br><span class="line">        error(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="built_in">abs</span>(arr1(<span class="built_in">i</span>,<span class="built_in">j</span>)- arr2(<span class="built_in">i</span>,<span class="built_in">j</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% plot Portion</span></span><br><span class="line">x_ = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">prompt_1 = <span class="string">&#x27;Enter the value of t to get the graph u(x,t) at t =: &#x27;</span> ;</span><br><span class="line">t = input(prompt_1);</span><br><span class="line">exctVal = arr1(:, t/delta_t+<span class="number">1</span> );</span><br><span class="line">numVal = arr2(:, t/delta_t+<span class="number">1</span> );</span><br><span class="line"><span class="built_in">plot</span> (x_,numVal,x_,exctVal,<span class="string">&#x27;lineWidth&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">s = num2str(t);</span><br><span class="line">txt = [<span class="string">&#x27;u(x,t), t= &#x27;</span>, s];</span><br><span class="line">ylabel(txt);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Numerical&#x27;</span>,<span class="string">&#x27;Exact&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Graphical-Output"><a href="#Graphical-Output" class="headerlink" title="Graphical Output"></a>Graphical Output</h4><p><img src="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/pdes1.png?raw=true" alt="avatar"><br><img src="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/pdes2.png?raw=true" alt="avatar"></p>
]]></content>
      <categories>
        <category>Numerical Analysis</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Compute the time available for meetings</title>
    <url>/2021/06/15/MeetingsCompute/</url>
    <content><![CDATA[<p>Phone users pls visit the pdf <a href="https://github.com/boxianglin/Storage/blob/main/Algorithm-Posts/Generate-a-List-of-Available-time-for-Meetings.pdf">here</a></p>
<h3 id="generate-a-list-of-available-time-for-meetings">Generate a List of Available Time for Meetings</h3>
<p><strong>Input</strong>:</p>
<p>Person1: <code>Given a nested list of current schedule person1 currently hold; a list of person's daily bound </code></p>
<p>Person2: <code>Given a nested list of current schedule person1 currently hold; a list of person's daily bound</code></p>
<p>Meeting_time frame: <code>30 minutes at least</code></p>
<p><strong>Output</strong>:</p>
<p>Return a nested list of all available time to schedule meetings for Person1 and Person2</p>
<p><em>example:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">p1_schedule &#x3D; [[&#39;9:00&#39;, &#39;10:45&#39;], [&#39;10:45&#39;, &#39;13:00&#39;], [&#39;16:00&#39;, &#39;18:00&#39;],[&#39;18:30&#39;,&#39;19:00&#39;]]</span><br><span class="line">p2_schedule &#x3D; [[&#39;10:00&#39;, &#39;10:30&#39;], [&#39;10:30&#39;, &#39;14:30&#39;], [&#39;14:30&#39;, &#39;15:00&#39;], [&#39;16:00&#39;, &#39;17:00&#39;]]</span><br><span class="line">p1_daily_bound &#x3D; [&#39;9:00&#39;,&#39;20:00&#39;]</span><br><span class="line">p2_daily_bound &#x3D; [&#39;10:00&#39;,&#39;18:30&#39;]</span><br><span class="line">meeting_time &#x3D; 30</span><br><span class="line"></span><br><span class="line">output: [[&#39;15:00&#39;, &#39;16:00&#39;], [&#39;18:00&#39;, &#39;18:30&#39;]]</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="pre-1-formal-definition-of-input">Pre 1. Formal Definition of Input</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
 &amp; \text{Suppoâ€¦'>\begin{align*}
 &amp; \text{Suppose } P \text{ is a list of schedules for a particular day that contains } t _{(i,j)}^{N} \text{ where t is a schedule between i to j time at Nth index of P } \\
 &amp; \text{We are also given a list of B that map to a P, where B contains two values } B_0\ and \ B_1 \\
 &amp; \text{Now, each input comply with the conditions below: }\\
 &amp; \text{}
\end{align*}
</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; p1.1)\ B_0 \â€¦'>\begin{align*}
&amp; p1.1)\ B_0 \leq [ t_{(i,j)}^N  \in P] \leq B_1 \\
&amp; p1.2)\ t_i &lt; t_j \leq   t_{i+1} &lt; t_{j+1} \leq t_{N=i}&lt;t_{N=j}\\
\end{align*}
</p>
<h4 id="pre-2-formal-definition-of-output">Pre 2. Formal Definition of Output</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; \text{Supposâ€¦'>\begin{align*}
&amp; \text{Suppose O list contains time segments } T_{(i,j)}^M \text{, O should be comply with below conditions} \\
\\
&amp; \text{Suppose, }\Delta t1_N = (t1_{j=0},t1_{i=1}),.....,(t1_{j=N-1},t1_{i=N}), \text{so is } \Delta t2_N\\
&amp; p2.1)\ \forall T_{(i,j)}^M \not \subset (\Delta t1_N + \Delta t2_N) \\
&amp; p2.2)\ Max(B(0)_0, B(1)_0)  \leq \forall\ T_{(i,j)}^M \leq Min(B(0)_0, B(1)_1)  \text{ where $B(x)$, $x$ represent a particular person}\\
&amp; p2.3)\ T_i &lt; T_j \leq T_{i+1 } &lt; T_{j+1}
\end{align*}
</p>
<h4 id="step-1-determine-the-final-bound-between-two-persons">Step 1. Determine The Final Bound Between Two Persons</h4>
<p>Pick the largest <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">B_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and smallest <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">B_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> to be Final Bound, we have to use this to cut off the out-of-bound time segments.</p>
<p>$ s1.1) finalBound = [max(B(0)_0,B(1)_0,min(B(0)_1,B(1)_1)]$</p>
<h4 id="step-2-combine-both-p-lists">Step 2. Combine Both P lists</h4>
<p>Since we know schedules of each P in sorted. We could merge both P lists by sorted order of  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Let the merge list called <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> has this unique condition to be aware of:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>2.1</mn><mo stretchy="false">)</mo><mtext>Â </mtext><mi mathvariant="normal">âˆ€</mi><msubsup><mi>C</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><mrow><mi>N</mi><mn>1</mn><mo>+</mo><mi>N</mi><mn>2</mn><mo>=</mo><mi>S</mi></mrow></msubsup><mo separator="true">,</mo><msub><mi>C</mi><mi>i</mi></msub><mo>â‰¤</mo><msub><mi>C</mi><mi>j</mi></msub><mtext>Â </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>Â </mtext><msub><mi>C</mi><mi>i</mi></msub><mo>â‰¤</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mtext>Â holds,Â butÂ </mtext><msub><mi>C</mi><mi>j</mi></msub><mo>â‰¤Ì¸</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mtext>Â </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>Â </mtext><msub><mi>C</mi><mi>j</mi></msub><mo>â‰¤Ì¸</mo><msub><mi>C</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub><mtext>Â turnsÂ outÂ toÂ beÂ notÂ necessary</mtext></mrow><annotation encoding="application/x-tex">s2.1)\ \forall C_{(i,j)}^{N1+N2 = S},C_i \leq C_j \ and\ C_i\leq C_{i+1} \text{ holds, but } C_{j} \not \leq C_{i+1} \ and \ C_j\not \leq C_{j+1} \text{ turns out to be not necessary}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.396662em;vertical-align:-0.505331em;"></span><span class="mord mathdefault">s</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace">Â </span><span class="mord">âˆ€</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.369669em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mord mtight">2</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.505331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace">Â </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace">Â </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">Â holds,Â butÂ </span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel">î€ </span></span><span class="fix"></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace">Â </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace">Â </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel">î€ </span></span><span class="fix"></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">Â turnsÂ outÂ toÂ beÂ notÂ necessary</span></span></span></span></span></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Take the example above:</span><br><span class="line">C &#x3D; [[&#39;9:00&#39;, &#39;10:45&#39;], [&#39;10:00&#39;, &#39;10:30&#39;], [&#39;10:30&#39;, &#39;14:30&#39;], [&#39;10:45&#39;, &#39;13:00&#39;], [&#39;14:30&#39;, &#39;15:00&#39;], [&#39;16:00&#39;, &#39;17:00&#39;], [&#39;16:00&#39;, &#39;18:00&#39;], [&#39;18:30&#39;, &#39;19:00&#39;]]</span><br></pre></td></tr></table></figure>
<p>Notice from above example: $C_{j=0} (â€˜10:45â€™) &gt; C_{i=1}(â€˜10:00â€™) $ and $C_{j=0} (â€˜10:45â€™) &gt; C_{j=1}(â€˜10:30â€™) $</p>
<h4 id="step-3-trim-the-combine-list">Step 3. Trim The Combine List</h4>
<p>We have to trim the Combine List, the purpose is to trim the C list to below condition:</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; s3.1) \text{â€¦'>\begin{align*}
&amp; s3.1) \text{Place the upper bound to first index } C= [finalBound[0],finalBound[0]]+C_{i,j}^S\\
&amp; s3.2) \ \forall C_{i}^{S},\forall C_j^S\leq finalBound[1] \text{ , To acheive this we have to do the followings combine list modifications :} \\
\end{align*}
</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; =\begin{caseâ€¦'>\begin{align*}
&amp; =\begin{cases}
C_i^S \geq finalBound[1],  &amp; \text{Remove current } C_{i,j}^S \\
C_i^S\leq finalBound[1] \ and\  C_j^S&gt;finalBound[1], &amp; finalBound[1] = C_i^s \text{ (We pick the smallest possible i) and } C_j^S=C_i^S
\end{cases} \\
\\
&amp; s3.3) \text{Append [finalBound[1],finalBound[1]] to C}
\end{align*}
</p>
<p>finalBound for the example is = [â€˜10:00â€™,â€˜18:30â€™]:</p>
<p>After s3.1, s3.2, s.3.3, C for the example above will be:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C &#x3D; [[&#39;10:00&#39;, &#39;10:00&#39;], [&#39;9:00&#39;, &#39;10:45&#39;], [&#39;10:00&#39;, &#39;10:30&#39;], [&#39;10:30&#39;, &#39;14:30&#39;], [&#39;10:45&#39;, &#39;13:00&#39;], [&#39;14:30&#39;, &#39;15:00&#39;], [&#39;16:00&#39;, &#39;17:00&#39;], [&#39;16:00&#39;, &#39;18:00&#39;], [&#39;18:30&#39;, &#39;18:30&#39;]]</span><br></pre></td></tr></table></figure>
<h4 id="step-4-main-logic-compute-the-o-output">Step 4. Main Logic: Compute the O (Output)</h4>
<p>Lets first assuming our C has this inequality relation <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>â‰¤</mo><msub><mi>C</mi><mi>j</mi></msub><mo>â‰¤</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>â‰¤</mo><msub><mi>C</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_i\leq C_j \leq C_{i+1} \leq C_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">â‰¤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> then we are confident to<br>
say that each $ [C_j, C_{i+1}] = T_{i = j,j = i+1} if\  \geq 30\ minutes$ is a solution. Why?</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; \text{Proof}â€¦'>\begin{align*}
&amp; \text{Proof}\\
&amp; \text{Given the above inequality C possess of, and indecies are defined and bounded   }i,j \in  \mathbb{Z}, 0\leq i,j\leq S;\\
&amp; \text{We know: }[finalBound[0], finalBound[1]] = [C_{i=0},C_{j=0})+[C_{i=0},C_{j=1}]+(C_i,C_j)+[C_{i=j},C_{i+1}]+.....(C_{i=S},C_{j=S}]  \\
&amp; \text{By definition of this sorted inequality, this shows each single C that sums up the the range in finalBound does not have overlaps} \\
&amp; \text{Hence, }\forall [C_{j,}, C_{i+1}] \text{ are the solutions because } = 1-(C_{0&lt;i&lt;S}^S,C_{0&lt;j&lt;S}^S)-[C_{i0},C_{j0})-(C_{iS},C_{jS}].
\end{align*}
</p>
<p>Which turns out if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub><mo>&gt;</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mtext>Â </mtext><mi>o</mi><mi>r</mi><mtext>Â </mtext><msub><mi>C</mi><mi>j</mi></msub><mo>&gt;</mo><msub><mi>C</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_j &gt; C_{i+1} \ or\  C_j &gt; C_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace">Â </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace">Â </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>C</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[C_j, C_{i+1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> is not a solution, intuitively, that the first case resulting negative time range, and second case producing overlaps which shows <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>C</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>C</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>âŠ†</mo><mo stretchy="false">[</mo><msub><mi>C</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">(C_i, C_j) \subseteq [C_j, C_{i+1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">âŠ†</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">â€‹</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{Ì²aÌ²lÌ²iÌ²gÌ²nÌ²*Ì²}Ì²
&amp; \text{Mechanâ€¦'>\begin{align*}
&amp; \text{Mechanism is to loop through the C list from index 0 to S and do the followings each iteration: }\\
\\
&amp; =\begin{cases}
C_j&gt;C_{i+1}\ and\ C_j\leq C_{j+1} ,  &amp; \text{Skip Current } C_{i,j}  \\
C_j&gt;C_{i+1}\ and\ C_j&gt; C_{j+1} ,  &amp; \text{Skip Current } C_{i,j} \text{ and marked } C_{j+1} = C_j  \\
C_j \leq C_{i+1} \ then \ of \ course\  C_j\leq C_{j+1},&amp; [C_j,C_{i+1}] \text{ is solution if } \geq 30\ min \\
\end{cases} \\
\end{align*}
</p>
<h4 id="python-implementation">Python Implementation</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##################################---MAIN FUNCTION --- ##################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aSchedule</span>(<span class="params">p1S, p2S, p1B, p2B, meet_time</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment">#Step 1</span></span><br><span class="line">    final_bound = dailyBound(p1B, p2B)</span><br><span class="line">    <span class="comment">#Step 2 and 3</span></span><br><span class="line">    combineS = combine(p1S, p2S,final_bound)</span><br><span class="line">    temp_end = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Step 4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(combineS)):</span><br><span class="line">        <span class="keyword">if</span> temp_end:</span><br><span class="line">            prev_end = temp_end[<span class="number">0</span>]</span><br><span class="line">            temp_end.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_end = combineS[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        start = combineS[i][<span class="number">0</span>]</span><br><span class="line">        end = combineS[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># Main Logic-----</span></span><br><span class="line">        <span class="keyword">if</span> compare(start, prev_end) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># if end &lt; prev_end, prev_end should be the next (prev_end) to compare with the start</span></span><br><span class="line">            <span class="keyword">if</span> compare(end,prev_end) &lt; <span class="number">0</span>:</span><br><span class="line">                temp_end.append(prev_end)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> compare(start, prev_end) &gt; <span class="number">0</span>:  <span class="comment"># start &gt; prev_end</span></span><br><span class="line">            <span class="keyword">if</span> difference(prev_end, start) &gt;= meet_time:  <span class="comment"># start - prev_end &gt;= meet_time</span></span><br><span class="line">                res.append([prev_end, start])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dailyBound</span>(<span class="params">p1B, p2B</span>):</span></span><br><span class="line">    finalBound = []</span><br><span class="line">    <span class="comment"># pick largest start</span></span><br><span class="line">    <span class="keyword">if</span> compare(p1B[<span class="number">0</span>],p2B[<span class="number">0</span>]) &gt;= <span class="number">0</span>: finalBound.append(p1B[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>: finalBound.append(p2B[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pick smallest start</span></span><br><span class="line">    <span class="keyword">if</span> compare(p1B[<span class="number">1</span>],p2B[<span class="number">1</span>]) &lt;= <span class="number">0</span>: finalBound.append(p1B[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>: finalBound.append(p2B[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> finalBound</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;&lt;Helper&gt;&gt; combine two sorted nested array</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">p1S, p2S,final_bound</span>):</span></span><br><span class="line">    combine = []</span><br><span class="line">    combine.append([final_bound[<span class="number">0</span>],final_bound[<span class="number">0</span>]])</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(p1S) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(p2S):</span><br><span class="line">        <span class="keyword">if</span> compare(p1S[i][<span class="number">0</span>], p2S[j][<span class="number">0</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">            combine.append(p1S[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            combine.append(p2S[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(p1S):</span><br><span class="line">        combine.append(p1S[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(p2S):</span><br><span class="line">        combine.append(p2S[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove the largest schedule beyong the final_bound and search for potentially new end bound</span></span><br><span class="line">    new_bound = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(combine)):</span><br><span class="line">        <span class="comment"># when start &lt; finalbound but end &gt;= finalbound, [i] = [start,start]</span></span><br><span class="line">        <span class="keyword">if</span> compare(combine[i][<span class="number">0</span>],final_bound[<span class="number">1</span>]) &lt;= <span class="number">0</span> <span class="keyword">and</span> compare(combine[i][<span class="number">1</span>], final_bound[<span class="number">1</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">            combine[i] = [combine[i][<span class="number">0</span>],combine[i][<span class="number">0</span>]]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> new_bound: <span class="comment">#we only take the first encounter one to be new bound</span></span><br><span class="line">                new_bound.append(combine[i][<span class="number">0</span>])</span><br><span class="line">            final_bound[<span class="number">1</span>] = new_bound[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># since the prev if condition valid, this will not execute, but next loops it will remove start &gt;= finalBound</span></span><br><span class="line">        <span class="keyword">if</span> compare(combine[i][<span class="number">0</span>],final_bound[<span class="number">1</span>]) &gt;= <span class="number">0</span>:</span><br><span class="line">            combine.remove(combine[i])</span><br><span class="line"></span><br><span class="line">    combine.append([final_bound[<span class="number">1</span>],final_bound[<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> combine</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;&lt;Helper&gt;&gt; compare</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span>(<span class="params">t1, t2</span>):</span></span><br><span class="line">    hr1, min1 = t1.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    hr2, min2 = t2.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    t1 = <span class="built_in">int</span>(hr1) * <span class="number">60</span> + <span class="built_in">int</span>(min1)  <span class="comment"># t1 total minutes</span></span><br><span class="line">    t2 = <span class="built_in">int</span>(hr2) * <span class="number">60</span> + <span class="built_in">int</span>(min2)  <span class="comment"># t2 total minutes</span></span><br><span class="line">    <span class="keyword">if</span> t1 &lt; t2:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> t1 &gt; t2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">difference</span>(<span class="params">t1, t2</span>):</span></span><br><span class="line">    hr1, min1 = t1.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    hr2, min2 = t2.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    t1 = <span class="built_in">int</span>(hr1) * <span class="number">60</span> + <span class="built_in">int</span>(min1)  <span class="comment"># t1 total minutes</span></span><br><span class="line">    t2 = <span class="built_in">int</span>(hr2) * <span class="number">60</span> + <span class="built_in">int</span>(min2)  <span class="comment"># t2 total minutes</span></span><br><span class="line">    <span class="keyword">return</span> t2 - t1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1S = [[<span class="string">&#x27;9:00&#x27;</span>, <span class="string">&#x27;10:45&#x27;</span>], [<span class="string">&#x27;10:45&#x27;</span>, <span class="string">&#x27;13:00&#x27;</span>], [<span class="string">&#x27;16:00&#x27;</span>, <span class="string">&#x27;18:00&#x27;</span>],[<span class="string">&#x27;18:30&#x27;</span>,<span class="string">&#x27;19:00&#x27;</span>]]</span><br><span class="line">p2S = [[<span class="string">&#x27;10:00&#x27;</span>, <span class="string">&#x27;10:30&#x27;</span>], [<span class="string">&#x27;10:30&#x27;</span>, <span class="string">&#x27;14:30&#x27;</span>], [<span class="string">&#x27;14:30&#x27;</span>, <span class="string">&#x27;15:00&#x27;</span>], [<span class="string">&#x27;16:00&#x27;</span>, <span class="string">&#x27;17:00&#x27;</span>]]</span><br><span class="line">p1B = [<span class="string">&#x27;9:00&#x27;</span>,<span class="string">&#x27;20:00&#x27;</span>]</span><br><span class="line">p2B = [<span class="string">&#x27;10:00&#x27;</span>,<span class="string">&#x27;18:30&#x27;</span>]</span><br><span class="line">print(aSchedule(p1S, p2S, p1B, p2B, <span class="number">30</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
</search>
