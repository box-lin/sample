<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Disjoint-Set Data Structure</title>
    <url>/2022/01/16/DisjointSet/</url>
    <content><![CDATA[<h2 id="Disjoint-Set-Visualization"><a href="#Disjoint-Set-Visualization" class="headerlink" title="Disjoint-Set Visualization"></a>Disjoint-Set Visualization</h2><p><img src="https://miro.medium.com/max/1400/1*S4iejP1UzIrilYQSosP_ig.png" alt=""></p>
<span id="more"></span> 
<h2 id="Optimized-“disjoint-set”-with-Path-Compression-and-Union-by-Rank-From-LeetCode"><a href="#Optimized-“disjoint-set”-with-Path-Compression-and-Union-by-Rank-From-LeetCode" class="headerlink" title="Optimized “disjoint set” with Path Compression and Union by Rank (From LeetCode)"></a>Optimized “disjoint set” with Path Compression and Union by Rank (From LeetCode)</h2><p>Unless worst case the average cases will be more efficient.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UnionFind class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        self.root = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        <span class="comment"># Use a rank array to record the height of each vertex, i.e., the &quot;rank&quot; of each vertex.</span></span><br><span class="line">        <span class="comment"># The initial &quot;rank&quot; of each vertex is 1, because each of them is</span></span><br><span class="line">        <span class="comment"># a standalone vertex with no connection to other vertices.</span></span><br><span class="line">        self.rank = [<span class="number">1</span>] * size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The find function here is the same as that in the disjoint set with path compression.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> x == self.root[x]:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        self.root[x] = self.find(self.root[x])</span><br><span class="line">        <span class="keyword">return</span> self.root[x]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The union function with union by rank</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        rootX = self.find(x)</span><br><span class="line">        rootY = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> rootX != rootY:</span><br><span class="line">            <span class="keyword">if</span> self.rank[rootX] &gt; self.rank[rootY]:</span><br><span class="line">                self.root[rootY] = rootX</span><br><span class="line">            <span class="keyword">elif</span> self.rank[rootX] &lt; self.rank[rootY]:</span><br><span class="line">                self.root[rootX] = rootY</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.root[rootY] = rootX</span><br><span class="line">                self.rank[rootX] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connected</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br></pre></td></tr></table></figure></p>
<h2 id="Quick-Find"><a href="#Quick-Find" class="headerlink" title="Quick Find"></a>Quick Find</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        self.root = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.root[x]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        rootX = self.find(x)</span><br><span class="line">        rootY = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> rootX != rootY:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.root)):</span><br><span class="line">                <span class="keyword">if</span> self.root[i] == rootY:</span><br><span class="line">                    self.root[i] = rootX</span><br><span class="line"></span><br><span class="line">    <span class="comment">#O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connected</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br></pre></td></tr></table></figure>
<h2 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size</span>):</span></span><br><span class="line">        self.root = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> x != self.root[x]:</span><br><span class="line">            x = self.root[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">		</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        rootX = self.find(x)</span><br><span class="line">        rootY = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> rootX != rootY:</span><br><span class="line">            self.root[rootY] = rootX</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connected</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structures</category>
      </categories>
      <tags>
        <tag>Data Structures</tag>
      </tags>
  </entry>
  <entry>
    <title>Numerically Solve PDE</title>
    <url>/2021/05/22/NumericallyPDE/</url>
    <content><![CDATA[<p>For phone user, the css might not be properly rendered for MathJax, please visit<br>
the pdf file at <a href="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/NumericallyPDEs.pdf">here</a></p>
<h4 id="sample-partial-differential-equation">Sample Partial Differential Equation</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
&amp; \text{Suppos…'>\begin{align*}
&amp; \text{Suppose given the PDE (Diffusion)} \\
&amp; \partial_tu=D\partial_x^2u,\ for\ x\ \in[0,1],and\ t&gt;0\\
\\
&amp; \text{Exact Solution (can be found in multiple PDEs textbooks): }\\
&amp; u(x,t) = \sum_{k=1}^{n}=\frac{4}{(k\pi)^2}sin(\frac{k\pi}{2})sin(k\pi x)e^{-0.5(k\pi )^2t}\\
\\
&amp; \text{We are going to compute the numerical solution with }\\
&amp; \text{the given information below. }\\
\\
&amp; \text{for }x \in[0,1] \text{ and t &gt; 0 :}\\
&amp; the\ initial\ condition\ u(x,0)=\begin{cases}
x,  &amp; \text{if } 0\leq x \leq 1/2\\
1-x, &amp; \text{if } 1/2 &lt; x\leq1   
\end{cases}\\
&amp;\text{the boundary condition } u(0,t)=u(1,t)=0 \\
\\
&amp; \text{The Explicit Difference Schema: }\\
&amp; \frac{u_j^{n+1}-u_j^n}{\Delta t}= D\frac{u_{j+1}^n-2u_j^n+u_{j-1}^n}{(\Delta x)^2}, where\ D=\frac{1}{2}\\
\\

&amp;\text{Take }\Delta x=0.1, \Delta t=1/100 \text{ to proceed the calculations;}
\end{align*}
</p>
<span id="more"></span>
<h4 id="solving-idea-for-a-particular-t">Solving Idea for a particular t</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
&amp; \text{Use of…'>\begin{align*}
&amp; \text{Use of the finite difference scheme for discretizing partial derivatives}\\
&amp; \text{reduces the problem to vector-matrix multiplication.}\\
\\
&amp; \text{Where the unknown vector }U^n=(U_1^n,U_2^n,...U_N^n)^T\text{ refers to sample}\\
&amp; \text{of grid values of the solution function }u(x,t) \text{ evaluated at } t = t_n.\\
\\
&amp; \text{Then what we focuse on for }u_j^n=u(x_j,t_n) \text{ is in a vector of }U^n to\ U^{n+1} \\
\\
&amp; \text{To calculated the }U^{n+1} , \text{we must use the explicit difference scheme}

\end{align*}
</p>
<h4 id="a-look-of-explicit-difference-scheme-equation">A Look of Explicit Difference Scheme Equation</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
&amp; \text{As we …'>\begin{align*}
&amp; \text{As we said we interested the vector }U^{n+1} = \text{a set of } u_j^{n+1} j\in[1,11],\\
&amp; \text{for the case that }\Delta x= 0.1, x\in[0,1]\\
\\
&amp; \text{Hence we would like to rearrange the equation to:}\\
\\
&amp; u_j^{n+1}= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}(u_{j+1}^n-2u_j^n+u_{j-1^n})+u_j^n\\
&amp; = u(x_j,t_{n+1})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_n)-2u(x_j,t_n)+u(x_{j-1},t_n)]+u(x_j,t_n)\\
\\
&amp; \text{for easier programming purpose, we shift the index of t left by one}\\
&amp; = u(x_j,t_{n})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_{n-1})-2u(x_j,t_{n-1})+u(x_{j-1},t_{n-1})]+u(x_j,t_{n-1})
\end{align*}
</p>
<h4 id="a-look-of-how-initial-and-boundary-condition-are-important">A Look of How Initial and Boundary Condition are Important</h4>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
&amp; \text{The ex…'>\begin{align*}
&amp; \text{The expression of } u(x,t)\text{ in 2D matrix: }\\
\\
&amp; \begin{matrix}
&amp; 1 &amp; 2&amp;3&amp; \cdots&amp;n\\
1&amp; u(0,0) &amp; u(0, 1\Delta t) &amp; u(0,2\Delta t) &amp; \cdots &amp;  u(0,n\Delta t) \\
2&amp; u(1 \Delta x,0) &amp; \cdots &amp; \cdots&amp; \cdots&amp; u(1\Delta x,n\Delta t)  \\
3&amp; u(2 \Delta x, 0) &amp; \cdots&amp; \cdots&amp; \cdots&amp; u(2\Delta x,n\Delta t)\\
&amp;.\\
&amp;. \\
11&amp; u(1,0)
&amp;\end{matrix}\\
\\
&amp;\text{The initial condition cover the values for first columns}\\
&amp;\text{And the boundary condition cover the values for first and last rows}\\
\\
&amp;\text{Now, the expression of }u(x,t) \text{ should be:} \\
\\
&amp; \begin{matrix}
&amp; 1 &amp; 2&amp;3&amp; \cdots&amp;n\\
1&amp; 0 &amp; 0 &amp; 0 &amp; \cdots &amp;  0 \\
2&amp; 0.1 &amp; u(1\Delta x,1\Delta t) &amp; \cdots&amp; \cdots&amp; u(1\Delta x,n\Delta t)  \\
3&amp; 0.2 &amp; u(2\Delta x,1\Delta t) &amp; \cdots&amp; \cdots&amp; u(2\Delta x,n\Delta t)\\
&amp;.\\
5&amp; 0.5 &amp;\cdots&amp; \cdots&amp; \cdots&amp; \\
6&amp; 0.4 &amp; \cdots&amp; \cdots&amp; \cdots&amp; \\
7&amp; 0.3 &amp;\cdots&amp; \cdots&amp; \cdots&amp; \\
&amp;. \\
11&amp; 0 &amp; 0 &amp; 0 &amp; \cdots &amp;  0
&amp;\end{matrix}\\
\\
\\
&amp; \text{Now from this matrix, we see the pattern of how explicit difference help}\\
&amp; \text{us to calculate the  } u(x_j,t_n);\\
\\
&amp; \text{For example: }u(x_2,t_2),\text{we need }u(x_1,t_1)，u(x_2,t_1),u(x_3,t_1)&#039;s \text{ values}\\
&amp;\text{to explicit difference equation: }\\
&amp; u(x_j,t_{n})= \frac{1}{2}\frac{\Delta t}{(\Delta x)^2}[u(x_{j+1},t_{n-1})-2u(x_j,t_{n-1})+u(x_{j-1},t_{n-1})]+u(x_j,t_{n-1})\\
\\
&amp; \text{Hence we know we must calculated the current columns&#039;s val then proceed to}\\
&amp; \text{proceed to the row, }U^n = \text{each columns value, and } U^{n+1} =\text{next columns value}
\end{align*}
</p>
<h4 id="matlab-implementations">MATLAB Implementations</h4>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">close all</span><br><span class="line"></span><br><span class="line">prompt = <span class="string">&#x27;Enter the value of ∆t: &#x27;</span>;</span><br><span class="line"><span class="comment">% set t_max= x then coloumns needed = x / delta_t + 1</span></span><br><span class="line"><span class="comment">% row = 1/ (0.01) + 1 = 11 (by default x[0,1]</span></span><br><span class="line">delta_t = input(prompt);</span><br><span class="line"></span><br><span class="line">prompt1 = <span class="string">&#x27;Enter the value of T(max): &#x27;</span>;</span><br><span class="line">column = input(prompt1) / delta_t + <span class="number">1</span> ;</span><br><span class="line">row = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2-D array with all zeros for exact solution</span></span><br><span class="line">arr1 = <span class="built_in">zeros</span>(row,column);</span><br><span class="line"></span><br><span class="line"><span class="comment">% initial variables for exact solution</span></span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">arr1_x = <span class="number">0</span>;</span><br><span class="line">arr1_t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% exact solution</span></span><br><span class="line"><span class="comment">% taking 14 terms</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:column</span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:<span class="number">14</span></span><br><span class="line">            result = result + <span class="number">4</span>/(k*<span class="built_in">pi</span>)^<span class="number">2</span>*<span class="built_in">sin</span>(k*<span class="built_in">pi</span>/<span class="number">2</span>)*<span class="built_in">sin</span>(k*<span class="built_in">pi</span>*arr1_x)*<span class="built_in">exp</span>(<span class="number">-0.5</span>*(k*<span class="built_in">pi</span>)^<span class="number">2</span>*arr1_t);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        arr1(<span class="built_in">i</span>,<span class="built_in">j</span>) = result;</span><br><span class="line">        arr1_t = arr1_t + delta_t;     </span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    arr1_t = <span class="number">0</span>;</span><br><span class="line">    arr1_x = arr1_x + <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Numerical Computing Solution</span></span><br><span class="line"><span class="comment">% (Initial Condition)</span></span><br><span class="line">arr2 = <span class="built_in">zeros</span>(row,column);</span><br><span class="line">x_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : row</span><br><span class="line">    <span class="keyword">if</span>(x_num&gt;<span class="number">0.5</span>)</span><br><span class="line">        arr2(<span class="built_in">i</span>,<span class="number">1</span>) = <span class="number">1</span>-x_num;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        arr2(<span class="built_in">i</span>,<span class="number">1</span>) = x_num;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    x_num = x_num + <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% applied explicit differences to calculate other points</span></span><br><span class="line"><span class="comment">% applied boundary condition as well</span></span><br><span class="line">dt = delta_t;</span><br><span class="line">dx = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">2</span>: column</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:row</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">i</span> == <span class="number">1</span> || <span class="built_in">i</span> == row)</span><br><span class="line">            arr2(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            arr2(<span class="built_in">i</span>,<span class="built_in">j</span>) =<span class="number">0.5</span> *dt/(dx)^<span class="number">2</span>*(arr2(<span class="built_in">i</span>+<span class="number">1</span>, <span class="built_in">j</span><span class="number">-1</span>)<span class="number">-2</span>*arr2(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>)+arr2(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span><span class="number">-1</span>))+arr2(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>); </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Error |Exact - Numerical|</span></span><br><span class="line">error = <span class="built_in">zeros</span>(row, column);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : column</span><br><span class="line">        error(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="built_in">abs</span>(arr1(<span class="built_in">i</span>,<span class="built_in">j</span>)- arr2(<span class="built_in">i</span>,<span class="built_in">j</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% plot Portion</span></span><br><span class="line">x_ = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">prompt_1 = <span class="string">&#x27;Enter the value of t to get the graph u(x,t) at t =: &#x27;</span> ;</span><br><span class="line">t = input(prompt_1);</span><br><span class="line">exctVal = arr1(:, t/delta_t+<span class="number">1</span> );</span><br><span class="line">numVal = arr2(:, t/delta_t+<span class="number">1</span> );</span><br><span class="line"><span class="built_in">plot</span> (x_,numVal,x_,exctVal,<span class="string">&#x27;lineWidth&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">s = num2str(t);</span><br><span class="line">txt = [<span class="string">&#x27;u(x,t), t= &#x27;</span>, s];</span><br><span class="line">ylabel(txt);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Numerical&#x27;</span>,<span class="string">&#x27;Exact&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="graphical-output">Graphical Output</h4>
<p><img src="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/pdes1.png?raw=true" alt="avatar"><br>
<img src="https://github.com/boxianglin/Storage/blob/main/Numerical-Solve-PDE-Post/pdes2.png?raw=true" alt="avatar"></p>
]]></content>
      <categories>
        <category>Fun Post</category>
      </categories>
      <tags>
        <tag>Fun Post</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie Data Structure</title>
    <url>/2022/01/16/Trie/</url>
    <content><![CDATA[<h2 id="Trie-Visualization"><a href="#Trie-Visualization" class="headerlink" title="Trie Visualization"></a>Trie Visualization</h2><p><img src="https://i.stack.imgur.com/f9Q3u.jpg" alt=""></p>
<span id="more"></span>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">For Node Instance with attribute </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- child (edge)</span></span><br><span class="line"><span class="string">- is_end (leaf)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.child = &#123;&#125;</span><br><span class="line">        self.is_end = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Trie structure that holds collection of Node.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.root = Node()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># cur pointer traverse trie from root</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">in</span> cur.child:</span><br><span class="line">                <span class="comment"># set current node edge in a weight of character to a new node</span></span><br><span class="line">                cur.child[c] = Node()</span><br><span class="line">            <span class="comment"># traverse to the end</span></span><br><span class="line">            cur = cur.child[c]</span><br><span class="line">        cur.is_end = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> cur.child:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            cur = cur.child[c]</span><br><span class="line">        <span class="comment"># see if can reach to leaf</span></span><br><span class="line">        <span class="keyword">return</span> cur.is_end</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span>(<span class="params">self, prefix: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> cur.child:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            cur = cur.child[p]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Structures</category>
      </categories>
      <tags>
        <tag>Data Structures</tag>
      </tags>
  </entry>
  <entry>
    <title>Custom Comparator Java and Python</title>
    <url>/2022/08/14/CustomComparator/</url>
    <content><![CDATA[<h3 id="in-java">In Java</h3>
<p>o2.compareTo(o1) if o2 &gt; o1 swap, so this is to reverse o1.compareTo(o2) if o1 &gt; o2 swap, so this is sort from low to high</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.compareTo(y) returns </span><br><span class="line">    <span class="number">1.</span> negative value <span class="keyword">if</span> x &lt; y   <span class="comment">//(x should appear first)</span></span><br><span class="line">    <span class="number">2.</span> zero <span class="keyword">if</span> x == y </span><br><span class="line">    <span class="number">3.</span> positive value <span class="keyword">if</span> x &gt; y   <span class="comment">//(x should apper second, need swap)</span></span><br></pre></td></tr></table></figure>
<h3 id="in-python">In Python</h3>
<p><code>def __lt__(self, other) overrides the &lt; operator</code></p>
<p>Example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span>   </span><br><span class="line">    <span class="keyword">if</span> self.cnt &gt; other.cnt:  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> self.cnt &lt; other.cnt: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>                     <span class="comment"># (sorted respect to cnt from small ---large)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># opposite sort</span></span><br><span class="line">        <span class="keyword">return</span> lt(other.word, self.word) <span class="comment"># other.word &lt; self.word  </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
